@version:3.2

# syslog-ng configuration file.
#
# This should behave pretty much like the original syslog on RedHat. But
# it could be configured a lot smarter.
#
# See syslog-ng(8) and syslog-ng.conf(5) for more information.
#
# vim:ft=syslog-ng:ai:si:ts=4:sw=4:et:

options {
	flush_lines (0);
	time_reopen (10);
   log_fifo_size (2048);
	long_hostnames (off);
	use_dns (no);
	use_fqdn (no);
	create_dirs (yes);
	keep_hostname (yes);
};

source s_sys {
	file ("/proc/kmsg" program_override("kernel: "));
	unix-stream ("/dev/log");
	internal();
	#udp(ip(0.0.0.0) port(514));
};

#############################################################
# s_remote source : listen for syslog on port 514 UDP 
source s_remote {
	udp(ip(0.0.0.0) port(514));
	tcp(ip(0.0.0.0) port(514));
};

#############################################################
# set up to send all messages to loghost as well as locally
# for testing (duplicates all logs on loghost)
destination d_loghost {tcp("10.8.15.31" port(514));};
log { source(s_sys); destination(d_loghost); };

#############################################################
# local syslog for this server only
destination d_cons { file("/dev/console"); };
destination d_mesg { file("/var/log/messages"); };
destination d_auth { file("/var/log/secure"); };
destination d_mail { file("/var/log/maillog" flush_lines(10)); };
destination d_spol { file("/var/log/spooler"); };
destination d_boot { file("/var/log/boot.log"); };
destination d_cron { file("/var/log/cron"); };
destination d_kern { file("/var/log/kern"); };
destination d_mlal { usertty("*"); };

filter f_kernel     { facility(kern); };
filter f_default    { level(info..emerg) and
                        not (facility(mail)
                        or facility(authpriv) 
                        or facility(cron)); };
filter f_auth       { facility(authpriv); };
filter f_mail       { facility(mail); };
filter f_emergency  { level(emerg); };
filter f_news       { facility(uucp) or
                        (facility(news) 
                        and level(crit..emerg)); };
filter f_boot   { facility(local7); };
filter f_cron   { facility(cron); };

# filter for removeing apps
filter f_xapp { not program("app/*"); } ;

#log { source(s_sys); filter(f_kernel); destination(d_cons); };
log { source(s_sys); filter(f_kernel); destination(d_kern); };
log { source(s_sys); filter(f_default); destination(d_mesg); };
log { source(s_sys); filter(f_auth); destination(d_auth); };
log { source(s_sys); filter(f_mail); destination(d_mail); };
log { source(s_sys); filter(f_news); destination(d_spol); };
log { source(s_sys); filter(f_boot); destination(d_boot); };
log { source(s_sys); filter(f_cron); destination(d_cron); };

# end local
#############################################################


#############################################################
# remote syslog processing 
#   for messages # arriving from the source s_remote defined
#   above
#
#   there are three sections for each log in syslog-ng :
#     destination : defines a file to put a log into
#     filter : filter the file
#     log : routing where a message should be put
#

# for each remote server send to a different directory 
destination mv_cons { file("/logs/remote/$HOST/console_$R_YEAR$R_MONTH$R_DAY"); };
destination mv_mesg { file("/logs/remote/$HOST/messages_$R_YEAR$R_MONTH$R_DAY"); };
destination mv_auth { file("/logs/remote/$HOST/secure_$R_YEAR$R_MONTH$R_DAY"); };
destination mv_mail { file("/logs/remote/$HOST/maillog_$R_YEAR$R_MONTH$R_DAY" flush_lines(10)); };
destination mv_spol { file("/logs/remote/$HOST/spooler_$R_YEAR$R_MONTH$R_DAY"); };
destination mv_boot { file("/logs/remote/$HOST/boot.log_$R_YEAR$R_MONTH$R_DAY"); };
destination mv_cron { file("/logs/remote/$HOST/cron_$R_YEAR$R_MONTH$R_DAY"); };
destination mv_kern { file("/logs/remote/$HOST/kern_$R_YEAR$R_MONTH$R_DAY"); };


# we already defined filters for general stuff locally
# so we'll use those to start with and go straight to log entries 

# for each place we wamnt to log things to - a message could
# easily be put in more than one place if required
# 
# log basically says for a message received on source matching filter
# log to destination file
#
log { source(s_remote); filter(f_xapp); filter(f_kernel); destination(mv_kern); };
log { source(s_remote); filter(f_xapp); filter(f_default); destination(mv_mesg); };
log { source(s_remote); filter(f_xapp); filter(f_auth); destination(mv_auth); };
log { source(s_remote); filter(f_xapp); filter(f_mail); destination(mv_mail); };
log { source(s_remote); filter(f_xapp); filter(f_news); destination(mv_spol); };
log { source(s_remote); filter(f_xapp); filter(f_boot); destination(mv_boot); };
log { source(s_remote); filter(f_xapp); filter(f_cron); destination(mv_cron); };

# nginx logging - could centralize
filter f_appnginx { program("app/nginx"); } ;
destination mv_nginx { file("/logs/remote/$HOST/nginx/access_log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_appnginx); destination(mv_nginx); };

filter f_appnginxerr { program("app/nginxerr"); } ;
destination mv_nginx { file("/logs/remote/$HOST/nginx/error_log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_appnginxerr); destination(mv_nginx); };

# mv2app unicorn logging - could centralize
filter f_mv2app { program("app/unicorn-mv"); } ;
destination mv_mv2app { file("/logs/remote/$HOST/mv2app/unicorn.stdout.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_mv2app); destination(mv_mv2app); };

filter f_mv2apperr { program("app/unicornerr-mv"); } ;
destination mv_mv2apperr { file("/logs/remote/$HOST/mv2app/unicorn.stderr.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_mv2apperr); destination(mv_mv2apperr); };

filter f_mv2appprodlog { program("app/unicornprod-mv"); } ;
destination mv_mv2appprodlog { file("/logs/remote/$HOST/mv2app/production.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_mv2appprodlog); destination(mv_mv2appprodlog); };

filter f_mv2appdelayedlog { program("app/unicorndelayed-mv"); } ;
destination mv_mv2appdelayedlog { file("/logs/remote/$HOST/mv2app/delayed_job.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_mv2appdelayedlog); destination(mv_mv2appdelayedlog); };

filter f_mv2appnewreliclog { program("app/newrelic-mv"); } ; 
destination mv_mv2appnewreliclog { file("/logs/remote/$HOST/mv2app/newrelic_agent.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_mv2appnewreliclog); destination(mv_mv2appnewreliclog); };

# threepoppies unicorn logging - could centralize
filter f_threep { program("app/unicorn-3p"); } ;
destination mv_threep { file("/logs/remote/$HOST/threepoppies/unicorn.stdout.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_threep); destination(mv_threep); };

filter f_threeperr { program("app/unicornerr-3p"); } ;
destination mv_threeperr { file("/logs/remote/$HOST/threepoppies/unicorn.stderr.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_threeperr); destination(mv_threeperr); };

filter f_threepprodlog { program("app/unicornprod-3p"); } ;
destination mv_threepprodlog { file("/logs/remote/$HOST/threepoppies/production.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_threepprodlog); destination(mv_threepprodlog); };

filter f_threepdelayedlog { program("app/unicorndelayed-3p"); } ;
destination mv_threepdelayedlog { file("/logs/remote/$HOST/threepoppies/delayed_job.log_$R_YEAR$R_MONTH$R_DAY"); };
log { source(s_remote); filter(f_threepdelayedlog); destination(mv_threepdelayedlog); };

# end remote
#############################################################




#############################################################
# graylog2 duplication of everything sent to this server
# destination d_graylog2 {udp("10.8.15.31" port(5514));};
# log { source(s_sys); source(s_remote); destination(d_graylog2); };
# end graylog2
#############################################################


